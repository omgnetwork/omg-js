version: 2.1

# Define the elixir-omg sha to run ci against below
parameters:
  elixir-omg-sha:
    type: string
    default: "5f599c2"

workflows:
  version: 2
  build-master:
    jobs:
      - unit-test:
          filters:
            branches:
              only: master
      - smoke-integration-test:
          requires: [unit-test]
          filters:
            branches:
              only: master
      - baseline-integration-test:
          requires: [unit-test]
          filters:
            branches:
              only: master
      - ife-integration-test:
          requires: [unit-test]
          filters:
            branches:
              only: master
      - dependencies-audit:
          filters:
            branches:
              only: master
      - publish_test_runner:
          requires: [smoke-integration-test, baseline-integration-test, ife-integration-test]
          filters:
            branches:
              only: master
  build-other-branches:
    jobs:
      - unit-test:
          filters:
            branches:
              ignore: master
      - smoke-integration-test:
          requires: [unit-test]
          filters:
            branches:
              ignore: master
      - baseline-integration-test:
          requires: [unit-test]
          filters:
            branches:
              ignore: master
      - ife-integration-test:
          requires: [unit-test]
          filters:
            branches:
              ignore: master
      - dependencies-audit:
          filters:
            branches:
              ignore: master

commands:
  setup_integration_tests:
    description: "Set up the integration test environment"
    steps:
      - run:
          # Circle CI does not automatically use the node version set by nvm in different job
          # https://discuss.circleci.com/t/nvm-does-not-change-node-version-on-machine/28973/4
          name: Bind circle CI with nvm
          command: |
            echo 'export NVM_DIR="/opt/circleci/.nvm"' >> $BASH_ENV
            echo ' [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"' >> $BASH_ENV
      - run:
          name: Install Node
          command: |
            export NVM_DIR="/opt/circleci/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            nvm install v12.16.1
            nvm alias default v12.16.1
      - run:
          name: Install Dependencies
          command: |
            export NVM_DIR="/opt/circleci/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            npm install
      - run:
          name: Setup elixir-omg
          command: |
            cd ~/project/packages/integration-tests
            wget https://raw.githubusercontent.com/omisego/elixir-omg/<< pipeline.parameters.elixir-omg-sha >>/Makefile
            wget https://raw.githubusercontent.com/omisego/elixir-omg/<< pipeline.parameters.elixir-omg-sha >>/snapshots.env
            wget https://raw.githubusercontent.com/omisego/elixir-omg/<< pipeline.parameters.elixir-omg-sha >>/contract_addresses_template.env
            mkdir -p priv/dev-artifacts
            mkdir -p data
            cd ~/project/packages/integration-tests/priv/dev-artifacts
            wget https://raw.githubusercontent.com/omisego/elixir-omg/<< pipeline.parameters.elixir-omg-sha >>/priv/dev-artifacts/fee_specs.dev.json
            cd ~/project/packages/integration-tests
            mkdir -p bin
            cd bin
            wget https://raw.githubusercontent.com/omisego/elixir-omg/<< pipeline.parameters.elixir-omg-sha >>/bin/generate-localchain-env
            cd ~/project/packages/integration-tests
            SNAPSHOT=SNAPSHOT_MIX_EXIT_PERIOD_SECONDS_120 make init-contracts
      - run:
          name: Start elixir-omg
          background: true
          command: |
            cd ~/project/packages/integration-tests
            ELIXIR_OMG_SHA=<< pipeline.parameters.elixir-omg-sha >> docker-compose up || (START_RESULT=$?; docker-compose logs; exit $START_RESULT;)
      - run:
          name: Setup Integration Test with ERC20
          command: |
            export NVM_DIR="/opt/circleci/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            cd ~/project/packages/integration-tests
            wget --retry-connrefused --waitretry=10 --read-timeout=10 --timeout=10 -t 20 http://localhost:7534/status.get
            npm run deploy-test-erc20

jobs:
  dependencies-audit:
    docker:
      - image: node:12.16.1-alpine3.11
    steps:
      - checkout
      - run: |
          apk update && apk upgrade
          apk add --no-cache git openssh make gcc g++ python
      - run:
          name: omg-js-root-repo
          command: |
            npm install && npm run audit-check
      - run:
          name: omg-js
          command: |
            cd packages/omg-js && npm install && npm run audit-check
      - run:
          name: omg-js-childchain
          command: |
            cd packages/omg-js-childchain && npm install && npm run audit-check
      - run:
          name: omg-js-rootchain
          command: |
            cd packages/omg-js-rootchain && npm install && npm run audit-check
      - run:
          name: omg-js-util
          command: |
            cd packages/omg-js-util && npm install && npm run audit-check
      - run:
          name: omg-js-react-native-omg-js
          command: |
            cd packages/react-native-omg-js && npm install && npm run audit-check
      - run:
          name: integration-test
          command: |
            cd packages/integration-tests && npm install && npm run audit-check

  unit-test:
    docker:
      - image: node:12.16.1-alpine3.11
    steps:
      - checkout
      - run: |
          apk update && apk upgrade
          apk add --no-cache git openssh make gcc g++ python
      - run:
          name: Install Dependencies
          command: |
            npm install --no-audit
            npm run lerna-reset
      - run:
          name: Run Linter
          command: npm run lint
      - run:
          name: Run Unit Tests
          command: npm run test
      - run:
          name: Run build browser omg-js test
          command: npm run build
      - run:
          name: Run build doc test
          command: npm run build-doc

  full-integration-test:
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - checkout
      - setup_integration_tests
      - run:
          name: Run All Integration Tests
          command: |
            npm run sequence-test
          environment:
            ETH_NODE: http://localhost:8545
            WATCHER_URL: http://localhost:7534
            WATCHER_SECURITY_URL: http://localhost:7434
            CHILDCHAIN_URL: http://localhost:9656
            PLASMAFRAMEWORK_CONTRACT_ADDRESS: "0xc673e4ffcb8464faff908a6804fe0e635af0ea2f"
            ERC20_CONTRACT_ADDRESS: "0x932130ff6e440aee05e6fa75ac5d385c4e3a4d5d"
            FUND_ACCOUNT: "0x6de4b3b9c28e9c3e84c2b2d3a875c947a84de68d"
            FUND_ACCOUNT_PRIVATEKEY: "0xd885a307e35738f773d8c9c63c7a3f3977819274638d04aaf934a1e1158513ce"
            MIN_AMOUNT_ETH_PER_TEST: 2
            MIN_AMOUNT_ERC20_PER_TEST: 20
            TOPUP_MULTIPLIER: 5
            FAUCET_SALT: integration-tests

  smoke-integration-test:
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - checkout
      - setup_integration_tests
      - run:
          name: Run minimum Smoke Integration Tests
          command: |
            npm run ci-min-smoke-test
          environment:
            ETH_NODE: http://localhost:8545
            WATCHER_URL: http://localhost:7534
            CHILDCHAIN_URL: http://localhost:9656
            PLASMAFRAMEWORK_CONTRACT_ADDRESS: "0xc673e4ffcb8464faff908a6804fe0e635af0ea2f"
            ERC20_CONTRACT_ADDRESS: "0x932130ff6e440aee05e6fa75ac5d385c4e3a4d5d"
            FUND_ACCOUNT: "0x6de4b3b9c28e9c3e84c2b2d3a875c947a84de68d"
            FUND_ACCOUNT_PRIVATEKEY: "0xd885a307e35738f773d8c9c63c7a3f3977819274638d04aaf934a1e1158513ce"
            MIN_AMOUNT_ETH_PER_TEST: 2
            MIN_AMOUNT_ERC20_PER_TEST: 20
            TOPUP_MULTIPLIER: 5
            FAUCET_SALT: integration-tests

  baseline-integration-test:
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - checkout
      - setup_integration_tests
      - run:
          name: Run Baseline Integration Tests
          command: |
            npm run ci-baseline-test
          environment:
            ETH_NODE: http://localhost:8545
            WATCHER_URL: http://localhost:7534
            CHILDCHAIN_URL: http://localhost:9656
            PLASMAFRAMEWORK_CONTRACT_ADDRESS: "0xc673e4ffcb8464faff908a6804fe0e635af0ea2f"
            ERC20_CONTRACT_ADDRESS: "0x932130ff6e440aee05e6fa75ac5d385c4e3a4d5d"
            FUND_ACCOUNT: "0x6de4b3b9c28e9c3e84c2b2d3a875c947a84de68d"
            FUND_ACCOUNT_PRIVATEKEY: "0xd885a307e35738f773d8c9c63c7a3f3977819274638d04aaf934a1e1158513ce"
            MIN_AMOUNT_ETH_PER_TEST: 2
            MIN_AMOUNT_ERC20_PER_TEST: 20
            TOPUP_MULTIPLIER: 5
            FAUCET_SALT: integration-tests

  ife-integration-test:
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - checkout
      - setup_integration_tests
      - run:
          name: Run IFE Integration Tests
          command: |
            npm run ci-ife-test
          environment:
            ETH_NODE: http://localhost:8545
            WATCHER_URL: http://localhost:7534
            CHILDCHAIN_URL: http://localhost:9656
            PLASMAFRAMEWORK_CONTRACT_ADDRESS: "0xc673e4ffcb8464faff908a6804fe0e635af0ea2f"
            ERC20_CONTRACT_ADDRESS: "0x932130ff6e440aee05e6fa75ac5d385c4e3a4d5d"
            FUND_ACCOUNT: "0x6de4b3b9c28e9c3e84c2b2d3a875c947a84de68d"
            FUND_ACCOUNT_PRIVATEKEY: "0xd885a307e35738f773d8c9c63c7a3f3977819274638d04aaf934a1e1158513ce"
            MIN_AMOUNT_ETH_PER_TEST: 2
            MIN_AMOUNT_ERC20_PER_TEST: 20
            TOPUP_MULTIPLIER: 5
            FAUCET_SALT: integration-tests

  publish_test_runner:
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - checkout
      - run:
          name: Docker login
          command: |
            echo $OMGBOT_DOCKER_TOKEN | docker login --username omisegobot --password-stdin
      - run:
          name: publish to public dockerhub
          command: |
            GIT_COMMIT_SHA=$(git rev-parse --short=7 HEAD)
            TEST_RUNNER_TAG=omisego/omg-js-testrunner:$GIT_COMMIT_SHA
            sh .circleci/ci_publish.sh $TEST_RUNNER_TAG
      - run:
          name: authenticate GCP with circle ci
          command: |
            echo $GCLOUD_SERVICE_KEY | gcloud auth activate-service-account --key-file=-
            gcloud -q auth configure-docker
      - run:
          name: publish to GCP container registry
          command: |
            GIT_COMMIT_SHA=$(git rev-parse --short=7 HEAD)
            TEST_RUNNER_TAG=gcr.io/omisego-development/omg-js-testrunner:$GIT_COMMIT_SHA
            sh .circleci/ci_publish.sh $TEST_RUNNER_TAG
